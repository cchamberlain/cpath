#!/bin/bash
#
# Convert between Windows and Unix paths at command line

set -e

NC='\033[0m'
RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
YELLOW='\033[1;33m'

windows_flag=false
unix_flag=false
escape_flag=false
lower_flag=false
upper_flag=false
directory_flag=false

usage_short="${BLUE}usage: cpath [-w] [-u] [-l] [-U] [-p] [path]"
usage_long="$usage_short\n-w: convert unix path to windows"
usage_long="$usage_long\n-u: convert windows path to unix"
usage_long="$usage_long\n-e: add escape characters for converted path"
usage_long="$usage_long\n-l: convert to lowercase"
usage_long="$usage_long\n-U: convert to uppercase"
usage_long="$usage_long\n-p: create directory recursively at path${NC}"

usage_short="$usage_short\nuse -h to get supported command information${NC}"

if [ "$#" == "0" ] ; then
  >&2 echo -e "$usage_short"
  exit 1
fi

options=":wuelUph"
shopt -u nocasematch
OPTIND=1
while getopts "$options" opt ; do
    case "$opt" in
    w )
      windows_flag=true
      ;;
    u )
      unix_flag=true
      ;;
    e )
      escape_flag=true
      ;;
    l )
      lower_flag=true
      ;;
    U )
      upper_flag=true
      ;;
    p )
      directory_flag=true
      ;;
    h )
      >&2 printf "%b" "$usage_long" && exit 1
      exit 0
      ;;
    \?)
      >&2 printf "%b" "unknown option: -$OPTARG"
      >&2 printf "%b" "$usage_short"
      exit 1
      ;;
    : )
      >&2 printf "%b" "missing option argument for -$OPTARG"
      >&2 printf "%b" "$usage_short"
      exit 1
      ;;
    * )
      >&2 printf "%b" "unimplemented option: -$OPTARG"
      >&2 printf "%b" "$usage_short"
      exit 1
    esac
done
shift $((OPTIND-1))

file_path="$1"
shift

if [ -z "$file_path" ] ; then
  file_path="$PWD"
fi

generate_name() {
  < /dev/urandom tr -dc a-z | head -c${1:-32};echo;
}

if [ "$windows_flag" = "$unix_flag" ] ; then
  >&2 printf "%b- must set -w or -u but not both -%b" "$RED" "$NC"
  exit 1
fi

if [ "$lower_flag" -a "$upper_flag" ] ; then
  >&2 printf "%b- cannot set both -l and -U flags -%b" "$RED" "$NC"
  exit 1
fi

win_path=""
unix_path=""

if [ "$lower_flag" = true ] ; then
  file_path="$(printf "%s" "$file_path" | tr '[:upper:]' '[:lower:]' )"
fi

if [ "$upper_flag" = true ] ; then
  file_path="$(printf "%s" "$file_path" | tr '[:lower:]' '[:upper:]' )"
fi

if [ "$windows_flag" = true ] ; then
  unix_path="$file_path"

  if [[ "$unix_path" == /* ]] ; then
    # strip leading slash and convert to backslash
    win_path="$(printf "%s" "$unix_path" | sed -e 's/^\///' -e 's/\//\\/g')"
    # Add semicolon after drive
    win_path="$(printf "%s:%s" "${win_path:0:1}" "${win_path:1}")"
  else
    # convert to backslash
    win_path="$(printf "%s" "$unix_path" | sed 's/\//\\/g')"
  fi

  if [ "$escape_flag" = true ] ; then
    win_path="$(printf "%s" "$win_path" | sed 's/\\/\\\\/g' )"
  fi

  printf "%s" "$win_path"
fi

if [ "$unix_flag" = true ] ; then
  win_path="$file_path"
  # handle absolute
    if [[ "$win_path" == [A-Za-z]:* ]] ; then
      # add leading slash and strip colons and convert backslash to forward slash
      upath="$(printf "%s" "$win_path" | tr -d ":" | sed -e 's/\\\\/\//g' -e 's/^/\//')"
      printf "%s" "$upath"
    else
      # convert to forward slash
      upath="$(printf "%s" "$1" |  sed 's/\\\\/\//g' )"
      printf "%s" "$upath"
    fi
  printf "%s" "$unix_path"
fi

if [ "$directory_flag" = true ] ; then
  mkdir -p "$unix_path"
fi
